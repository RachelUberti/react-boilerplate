{"ast":null,"code":"import { InterestFrequency } from \"../types/interest\";\nexport function calculateFinalBalance(depositAmount, interestRate, investmentTerm, interestFrequency) {\n  let timesInterestApplied;\n  let effectiveInterestRate;\n  switch (interestFrequency) {\n    case InterestFrequency.Monthly:\n      timesInterestApplied = investmentTerm;\n      effectiveInterestRate = interestRate / InterestFrequency.Monthly;\n      break;\n    case InterestFrequency.Quarterly:\n      timesInterestApplied = investmentTerm / 3;\n      effectiveInterestRate = interestRate / InterestFrequency.Quarterly;\n      break;\n    case InterestFrequency.Annually:\n      timesInterestApplied = investmentTerm / 12;\n      effectiveInterestRate = interestRate;\n      break;\n    case InterestFrequency.AtMaturity:\n      timesInterestApplied = 1;\n      effectiveInterestRate = interestRate * (investmentTerm / 12);\n      break;\n    default:\n      throw new Error(\"Invalid interest payment frequency\");\n  }\n\n  // Represents how much the initial investment grows after one compounding period based on the effective interest rate\n  // NOTE: I learned a fair chunk about compounding interest while building this, so thanks!\n  const compoundingFactor = 1 + effectiveInterestRate / 100;\n  const futureValue = depositAmount * Math.pow(compoundingFactor, timesInterestApplied);\n  return futureValue;\n}","map":{"version":3,"names":["InterestFrequency","calculateFinalBalance","depositAmount","interestRate","investmentTerm","interestFrequency","timesInterestApplied","effectiveInterestRate","Monthly","Quarterly","Annually","AtMaturity","Error","compoundingFactor","futureValue","Math","pow"],"sources":["/Users/joshh/Repositories/personal/up-bank-coding-challenge/src/utils/calculator.ts"],"sourcesContent":["import { InterestFrequency } from \"../types/interest\";\n\nexport function calculateFinalBalance(\n  depositAmount: number,\n  interestRate: number,\n  investmentTerm: number,\n  interestFrequency: InterestFrequency\n): number {\n  let timesInterestApplied: number;\n  let effectiveInterestRate: number;\n\n  switch (interestFrequency) {\n    case InterestFrequency.Monthly:\n      timesInterestApplied = investmentTerm;\n      effectiveInterestRate = interestRate / InterestFrequency.Monthly;\n      break;\n    case InterestFrequency.Quarterly:\n      timesInterestApplied = investmentTerm / 3;\n      effectiveInterestRate = interestRate / InterestFrequency.Quarterly;\n      break;\n    case InterestFrequency.Annually:\n      timesInterestApplied = investmentTerm / 12;\n      effectiveInterestRate = interestRate;\n      break;\n    case InterestFrequency.AtMaturity:\n      timesInterestApplied = 1;\n      effectiveInterestRate = interestRate * (investmentTerm / 12);\n      break;\n    default:\n      throw new Error(\"Invalid interest payment frequency\");\n  }\n\n  // Represents how much the initial investment grows after one compounding period based on the effective interest rate\n  // NOTE: I learned a fair chunk about compounding interest while building this, so thanks!\n  const compoundingFactor = 1 + (effectiveInterestRate / 100);\n\n  const futureValue = depositAmount * Math.pow(compoundingFactor, timesInterestApplied);\n\n  return futureValue;\n}\n"],"mappings":"AAAA,SAASA,iBAAiB,QAAQ,mBAAmB;AAErD,OAAO,SAASC,qBAAqBA,CACnCC,aAAqB,EACrBC,YAAoB,EACpBC,cAAsB,EACtBC,iBAAoC,EAC5B;EACR,IAAIC,oBAA4B;EAChC,IAAIC,qBAA6B;EAEjC,QAAQF,iBAAiB;IACvB,KAAKL,iBAAiB,CAACQ,OAAO;MAC5BF,oBAAoB,GAAGF,cAAc;MACrCG,qBAAqB,GAAGJ,YAAY,GAAGH,iBAAiB,CAACQ,OAAO;MAChE;IACF,KAAKR,iBAAiB,CAACS,SAAS;MAC9BH,oBAAoB,GAAGF,cAAc,GAAG,CAAC;MACzCG,qBAAqB,GAAGJ,YAAY,GAAGH,iBAAiB,CAACS,SAAS;MAClE;IACF,KAAKT,iBAAiB,CAACU,QAAQ;MAC7BJ,oBAAoB,GAAGF,cAAc,GAAG,EAAE;MAC1CG,qBAAqB,GAAGJ,YAAY;MACpC;IACF,KAAKH,iBAAiB,CAACW,UAAU;MAC/BL,oBAAoB,GAAG,CAAC;MACxBC,qBAAqB,GAAGJ,YAAY,IAAIC,cAAc,GAAG,EAAE,CAAC;MAC5D;IACF;MACE,MAAM,IAAIQ,KAAK,CAAC,oCAAoC,CAAC;EACzD;;EAEA;EACA;EACA,MAAMC,iBAAiB,GAAG,CAAC,GAAIN,qBAAqB,GAAG,GAAI;EAE3D,MAAMO,WAAW,GAAGZ,aAAa,GAAGa,IAAI,CAACC,GAAG,CAACH,iBAAiB,EAAEP,oBAAoB,CAAC;EAErF,OAAOQ,WAAW;AACpB"},"metadata":{},"sourceType":"module","externalDependencies":[]}