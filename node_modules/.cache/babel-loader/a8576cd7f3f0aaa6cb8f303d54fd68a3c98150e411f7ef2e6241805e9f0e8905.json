{"ast":null,"code":"export const getUserLocation = async () => {\n  if (navigator.geolocation) {\n    navigator.geolocation.getCurrentPosition(async position => {\n      const {\n        latitude,\n        longitude\n      } = position.coords;\n      try {\n        const data = await fetchWeatherData(latitude, longitude);\n        return data;\n      } catch (error) {\n        return 'Error fetching weather data: ' + error.message;\n      }\n    }, error => {\n      return 'Error fetching weather data: ' + error.message;\n    });\n  }\n};\n\n/**\n * What are promises used for and why are they important\n * When would you use a promise?\n *\n * What does a try catch do / why would you use it\n *\n * side homework: when to const, function, and let\n */\n\n/**\n * This function will return a large set of data for the last 24 hours of weather\n * @param {number} latitude The latitude of the user\n * @param {number} longitude The longitude of the user\n * returns a data JSON object of the users location\n */\nexport async function fetchWeatherData(latitude, longitude) {\n  const apiURL = `https://api.open-meteo.com/v1/bom?latitude=${latitude}&longitude=${longitude}&hourly=temperature_2m,cloud_cover,cloud_cover_low,cloud_cover_mid,cloud_cover_high&forecast_days=1`;\n  const res = await fetch(apiURL);\n  return res.json();\n}","map":{"version":3,"names":["getUserLocation","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","data","fetchWeatherData","error","message","apiURL","res","fetch","json"],"sources":["/Users/joshh/Repositories/react-boilerplate/src/utils/globals.js"],"sourcesContent":["export const getUserLocation = async () => {\n  if (navigator.geolocation) {\n    navigator.geolocation.getCurrentPosition(\n      async (position) => {\n        const { latitude, longitude } = position.coords;\n        try {\n          const data = await fetchWeatherData(latitude, longitude);\n          return data;\n        } catch (error) {\n          return 'Error fetching weather data: ' + error.message;\n        }\n      },\n      (error) => {\n        return 'Error fetching weather data: ' + error.message;\n      }\n    );\n  }\n};\n\n/**\n * What are promises used for and why are they important\n * When would you use a promise?\n *\n * What does a try catch do / why would you use it\n *\n * side homework: when to const, function, and let\n */\n\n/**\n * This function will return a large set of data for the last 24 hours of weather\n * @param {number} latitude The latitude of the user\n * @param {number} longitude The longitude of the user\n * returns a data JSON object of the users location\n */\nexport async function fetchWeatherData(latitude, longitude) {\n  const apiURL = `https://api.open-meteo.com/v1/bom?latitude=${latitude}&longitude=${longitude}&hourly=temperature_2m,cloud_cover,cloud_cover_low,cloud_cover_mid,cloud_cover_high&forecast_days=1`;\n  const res = await fetch(apiURL);\n  return res.json();\n}\n"],"mappings":"AAAA,OAAO,MAAMA,eAAe,GAAG,MAAAA,CAAA,KAAY;EACzC,IAAIC,SAAS,CAACC,WAAW,EAAE;IACzBD,SAAS,CAACC,WAAW,CAACC,kBAAkB,CACtC,MAAOC,QAAQ,IAAK;MAClB,MAAM;QAAEC,QAAQ;QAAEC;MAAU,CAAC,GAAGF,QAAQ,CAACG,MAAM;MAC/C,IAAI;QACF,MAAMC,IAAI,GAAG,MAAMC,gBAAgB,CAACJ,QAAQ,EAAEC,SAAS,CAAC;QACxD,OAAOE,IAAI;MACb,CAAC,CAAC,OAAOE,KAAK,EAAE;QACd,OAAO,+BAA+B,GAAGA,KAAK,CAACC,OAAO;MACxD;IACF,CAAC,EACAD,KAAK,IAAK;MACT,OAAO,+BAA+B,GAAGA,KAAK,CAACC,OAAO;IACxD,CACF,CAAC;EACH;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeF,gBAAgBA,CAACJ,QAAQ,EAAEC,SAAS,EAAE;EAC1D,MAAMM,MAAM,GAAI,8CAA6CP,QAAS,cAAaC,SAAU,qGAAoG;EACjM,MAAMO,GAAG,GAAG,MAAMC,KAAK,CAACF,MAAM,CAAC;EAC/B,OAAOC,GAAG,CAACE,IAAI,CAAC,CAAC;AACnB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}