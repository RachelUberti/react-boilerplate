{"ast":null,"code":"export const getUserLocation = async () => {\n  return new Promise((resolve, reject) => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(async position => {\n        const {\n          latitude,\n          longitude\n        } = position.coords;\n        try {\n          const data = await fetchWeatherData(latitude, longitude);\n          resolve(data);\n          return data;\n        } catch (error) {\n          reject(new Error('Error fetching weather data: ' + error.message));\n        }\n      }, error => {\n        reject(new Error('Error getting user location: ' + error.message));\n      });\n    } else {\n      reject(new Error('Geolocation is not supported by this browser.'));\n    }\n  });\n};\n\n/**\n * @param {*} latitude The latitude of the user\n * @param {*} longitude The longitude of the user\n */\nexport async function fetchWeatherData(latitude, longitude) {\n  const apiURL = `https://api.open-meteo.com/v1/bom?latitude=${latitude}&longitude=${longitude}&hourly=temperature_2m,cloud_cover,cloud_cover_low,cloud_cover_mid,cloud_cover_high&forecast_days=1`;\n  const res = await fetch(apiURL);\n  return res.json();\n}","map":{"version":3,"names":["getUserLocation","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","data","fetchWeatherData","error","Error","message","apiURL","res","fetch","json"],"sources":["/Users/joshh/Repositories/react-boilerplate/src/utils/globals.js"],"sourcesContent":["export const getUserLocation = async () => {\n  return new Promise((resolve, reject) => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        async (position) => {\n          const { latitude, longitude } = position.coords;\n          try {\n            const data = await fetchWeatherData(latitude, longitude);\n            resolve(data);\n            return data;\n          } catch (error) {\n            reject(new Error('Error fetching weather data: ' + error.message));\n          }\n        },\n        (error) => {\n          reject(new Error('Error getting user location: ' + error.message));\n        }\n      );\n    } else {\n      reject(new Error('Geolocation is not supported by this browser.'));\n    }\n  });\n};\n\n/**\n * @param {*} latitude The latitude of the user\n * @param {*} longitude The longitude of the user\n */\nexport async function fetchWeatherData(latitude, longitude) {\n  const apiURL = `https://api.open-meteo.com/v1/bom?latitude=${latitude}&longitude=${longitude}&hourly=temperature_2m,cloud_cover,cloud_cover_low,cloud_cover_mid,cloud_cover_high&forecast_days=1`\n  const res = await fetch(apiURL);\n  return res.json();\n}\n"],"mappings":"AAAA,OAAO,MAAMA,eAAe,GAAG,MAAAA,CAAA,KAAY;EACzC,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC,IAAIC,SAAS,CAACC,WAAW,EAAE;MACzBD,SAAS,CAACC,WAAW,CAACC,kBAAkB,CACtC,MAAOC,QAAQ,IAAK;QAClB,MAAM;UAAEC,QAAQ;UAAEC;QAAU,CAAC,GAAGF,QAAQ,CAACG,MAAM;QAC/C,IAAI;UACF,MAAMC,IAAI,GAAG,MAAMC,gBAAgB,CAACJ,QAAQ,EAAEC,SAAS,CAAC;UACxDP,OAAO,CAACS,IAAI,CAAC;UACb,OAAOA,IAAI;QACb,CAAC,CAAC,OAAOE,KAAK,EAAE;UACdV,MAAM,CAAC,IAAIW,KAAK,CAAC,+BAA+B,GAAGD,KAAK,CAACE,OAAO,CAAC,CAAC;QACpE;MACF,CAAC,EACAF,KAAK,IAAK;QACTV,MAAM,CAAC,IAAIW,KAAK,CAAC,+BAA+B,GAAGD,KAAK,CAACE,OAAO,CAAC,CAAC;MACpE,CACF,CAAC;IACH,CAAC,MAAM;MACLZ,MAAM,CAAC,IAAIW,KAAK,CAAC,+CAA+C,CAAC,CAAC;IACpE;EACF,CAAC,CAAC;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,eAAeF,gBAAgBA,CAACJ,QAAQ,EAAEC,SAAS,EAAE;EAC1D,MAAMO,MAAM,GAAI,8CAA6CR,QAAS,cAAaC,SAAU,qGAAoG;EACjM,MAAMQ,GAAG,GAAG,MAAMC,KAAK,CAACF,MAAM,CAAC;EAC/B,OAAOC,GAAG,CAACE,IAAI,CAAC,CAAC;AACnB"},"metadata":{},"sourceType":"module","externalDependencies":[]}